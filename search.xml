<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[周总结]]></title>
    <url>%2F2017%2F11%2F08%2F%E5%91%A8%E6%8A%A5%2F</url>
    <content type="text"><![CDATA[本周概况 完成 水墨人生 JSSDK相关功能的开发以及一些收尾工作 开启 经英教育 项目并完成基本项目架构以及页面规划 完成复学相关手续 下周安排 继续 经英教育 项目的开发 完善 react-cli 脚手架项目 完成 学院官网 扫描的漏洞问题]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人总结的react脚手架]]></title>
    <url>%2F2017%2F09%2F07%2F%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93%E7%9A%84react%E8%84%9A%E6%89%8B%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[react-clireact应用的起步工程和总结 Github传送门 特点采用时下流行的技术栈，视图：react，状态管理：redux，路由：react-router 作为基础，配合webpack等开发工具而搭建的项目架构，适用于中小型项目，也可以在此基础上进行调整适合更多类型的项目。 同时还会提供react开发相关的资料、疑问、解决方案等，希望对开发者有所帮助，也对自己的技术有所提升。欢迎大家提供建议 技术栈 react redux react-router mock pace whatwg-fetch 项目构建目录结构123456789101112131415161718192021222324252627282930313233343536.├── README.md├── build #构建生成目录│ ├── bundle │ └── index.html├── package-lock.json├── package.json├── src #源代码文件│ ├── action.js #action创建函数文件│ ├── components #组件目录 *1│ │ ├── layout│ │ └── notify│ ├── http.js #所有fetch请求 *2│ ├── index.html #webpack生成html的模板 *3│ ├── index.js #入口文件│ ├── reducer.js #reducer *4│ ├── router.js #路由定义│ ├── routes #路由对应的page目录│ │ ├── App.js #入口文件 *5│ │ ├── index #一个页面对应一个文件夹 *6│ │ │ ├── Index.js│ │ │ └── index.scss│ │ └── login│ │ ├── Login.js│ │ └── login.scss│ ├── static #静态文件夹│ │ └── logo.jpg│ ├── store.js #store创建文件 *7│ └── utils #工具集│ ├── config.js #项目配置│ ├── mock.js #本地mock数据│ ├── pace.css #首屏加载动画css│ ├── pace.js #首屏加载动画js│ └── theme.scss #主题sass变量├── webpack.config.js #webpack开发配置文件└── webpack.production.config.js #webpack构建配置文件 目录结构说明 components 每一个组件对应一个文件夹，包含该组件js以及css，更小的组件也放在该文件夹下 将所有的请求独立出来放在一个文件里，每个fetch请求封装成一个回调函数并export 采用自定义html模板进行打包便于引用cdn等文件，或者其他自定义操作 项目复杂的时候可以创建reducer文件夹，进一步拆分 每个页面都是该组件的字组件，便于引入例如通知等全局组件 每个页面对应一个文件夹，因为一个页面包含的组件较多，利于拆分 独立出来store是便于在非组件的文件中操作reducer的store 开发说明克隆项目: 1git clone https://github.com/Houserqu/react-cli.git 进入项目目录安装依赖: 1npm i 开发: 1npm run dev 构建: 1npm run build]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>redux</tag>
        <tag>webpack</tag>
        <tag>react-router</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[曲折回学路]]></title>
    <url>%2F2017%2F09%2F05%2F%E6%9B%B2%E6%8A%98%E5%9B%9E%E5%AD%A6%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[时隔五个月，终于再次回到学校，从去年12月份检查出病到现在，居然已经有十余月，真的不知道是如何走到现在的。这次病魔缠身，对我身体和精神带来了巨大打击，对家人也是带来了沉重的负担，感触颇深，希望对生命有重新的认识吧。不彻底痛苦一次，就不会知道生活恶习所引发的蝴蝶效应。 虽然已经回到学校，但似乎还没有那么顺利上课，治疗时间还没有达到规定，只好按规定办事了。 左手静脉血管上扎的疤痕依旧清晰可见，一天大把的药还需要服用，革命尚未成功！只能告诫自己好好爱惜身体吧。 这次回校真的激动万分，见到了等待已久的她，见到了高谈阔论的室友。生活很美好！]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[fetch post formData]]></title>
    <url>%2F2017%2F08%2F18%2Ffetch-post-formData%2F</url>
    <content type="text"><![CDATA[当使用fetch用表单的方式post json类型的数据时候，需要注意几个问题 header设置header 的 ‘Content-Type’,’application/x-www-form-urlencoded;charset=utf-8’ 序列化json尝试过多种方式，需要处理成 ‘username=admin&amp;password=password’这种方式才能被正确的识别成 formData格式，可以在浏览器查看具体的请求体采用类似 new FormData() 方式会被处理成——WebKitFormBoundary 具体示例 1234567891011121314151617//序列化jsonconst formBody = Object.keys(paramsArray).map(key=&gt;encodeURIComponent(key)+'='+encodeURIComponent(paramsArray[key])) .join('&amp;');var headers = new Headers();headers.set('Content-Type','application/x-www-form-urlencoded;charset=utf-8');fetch('api/auth/login',&#123; method:'post', mode:'cors', credentials: "include", headers, body: formBody&#125;).then((response)=&gt;&#123; return response.json(); &#125;).then((responseData)=&gt;&#123; console.log(responseData);&#125;); 参考：四种常见的 POST 提交数据方式how to post a x-www-form-urlencoded request from react-nativeHow to make a post request with JSON data in application/x-www-form-urlencoded]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>fetch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AJAX/Fetch 在跨域情况下发送cookie并保持 sessionid一致]]></title>
    <url>%2F2017%2F08%2F18%2FAJAX-Fetch%E5%9C%A8%E8%B7%A8%E5%9F%9F%E6%83%85%E5%86%B5%E5%8F%91%E9%80%81cookie%E5%B9%B6%E4%BF%9D%E6%8C%81sessionid%E4%B8%80%E8%87%B4%2F</url>
    <content type="text"><![CDATA[Ajaxajax在跨域发送请求的时候需要添加 xhrFields 12345678910111213$.ajax(&#123; url:'example.com', method:'post', datatype:'json', xhrFields: &#123; withCredentials: true &#125;, crossDomain: true, data:param, success:function(data)&#123; console.log(data); &#125; &#125;) Fetchfetch在跨域发送请求的时候需要添加 credentials: “include” 12345678910fetch('http://example.com',&#123; method:'post', mode:'cors', credentials: "include", body: param&#125;).then((response)=&gt;&#123; return response.json(); &#125;).then((responseData)=&gt;&#123; console.log(responseData);&#125;); 参考：Ajax跨域请求，同时保证session一致Fetch API with Cookie]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>ajax</tag>
        <tag>fetch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更换新的Blog系统]]></title>
    <url>%2F2017%2F08%2F06%2F%E6%9B%B4%E6%8D%A2%E6%96%B0%E7%9A%84Blog%2F</url>
    <content type="text"><![CDATA[经过长时间的调研，钻研，新的blog系统终于上线了 从wordpress，到个人用react+laravel开发，到现在的github pages 觉得目前的模式还是挺不错的，github，nodejs，markdown都是我非常喜欢的技术，这三者的结合希望能给我带来愉快的码字体验 当然最重要的还是多敲多写 好记性不如烂指头]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F06%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>node</tag>
      </tags>
  </entry>
</search>
